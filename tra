import torch
from torch import nn
from torch.autograd import Function
from torch.nn import functional as F


class GridSampleBackward(Function):
    @staticmethod
    def forward(ctx, input, grid):
        ctx.save_for_backward(input, grid)
        return torch.nn.functional.grid_sample(
            input, grid, padding_mode="border", align_corners=False
        )

    @staticmethod
    def backward(ctx, grad_output):
        _input, grid = ctx.saved_tensors
        grad_input = grad_grid = None

        if ctx.needs_input_grad[0]:
            grad_input = GridSampleBackward.apply(grad_output, grid)
        if ctx.needs_input_grad[1]:
            grad_grid = torch.zeros_like(grid)

        return grad_input, grad_grid


def grid_sample_compat(input, grid, mode=None, padding_mode=None, align_corners=None):
    """
    Compatibility wrapper for grid_sample that handles the 'mode' parameter
    that was deprecated in newer PyTorch versions.
    """
    # Handle the deprecated mode parameter by ignoring it
    # since bilinear is the default and only option in newer PyTorch
    if mode is not None and mode != "bilinear":
        raise ValueError(f"Only 'bilinear' mode is supported, got: {mode}")

    # Use default values if not specified
    if padding_mode is None:
        padding_mode = "border"
    if align_corners is None:
        align_corners = False

    # Call the original PyTorch function using torch.nn.functional
    return torch.nn.functional.grid_sample(
        input, grid, padding_mode=padding_mode, align_corners=align_corners
    )


def grid_sample_gradfix(input, grid):
    """Grid sample with gradient fix for high-order gradients."""
    return GridSampleBackward.apply(input, grid)


def grid_sample_default(input, grid):
    """Default grid sample without gradient fix."""
    return torch.nn.functional.grid_sample(
        input, grid, padding_mode="border", align_corners=False
    )


def enable_gradfix() -> None:
    """Enable the gradient fix for grid_sample by replacing the original function."""
    F.grid_sample = grid_sample_gradfix


def enable_compat() -> None:
    """Enable compatibility mode for grid_sample that handles deprecated parameters."""
    # Store the original function
    if not hasattr(F, "_original_grid_sample"):
        F._original_grid_sample = F.grid_sample

    # Replace with our compatibility wrapper
    F.grid_sample = grid_sample_compat


def restore_original() -> None:
    """Restore the original grid_sample function."""
    if hasattr(F, "_original_grid_sample"):
        F.grid_sample = F._original_grid_sample
    else:
        # Fallback to default PyTorch implementation
        F.grid_sample = grid_sample_default
